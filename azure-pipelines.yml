trigger:
- main

variables:
  rgName: 'hello-world-nodejs-rg'
  location: 'westeurope'
  resourceSuffix: '0007'
  webName: 'helloworld-nodejs-$(resourceSuffix)'
  planName: 'helloworld-nodejs-plan'

stages:
- stage: ResourcesAzure
  displayName: Resources Azure stage
  jobs:
  - job: Infra
    displayName: Infra
    pool:
      vmImage: 'ubuntu-latest'

    steps:

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'contoso-pierrc (cebd1df9-6ffd-4c75-aaac-3b76fe2c5fac)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create \
            --name $(rgName) \
            --location $(location)
          
          az appservice plan create \
            --name $(planName) \
            --resource-group $(rgName) \
            --sku B1 \
            --is-linux

          az webapp create \
            --name $(webName) \
            --resource-group $(rgName) \
            --plan $(planName) \
            --runtime "node|16-lts"
      displayName: 'App Service Deployment'
    
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'contoso-pierrc (cebd1df9-6ffd-4c75-aaac-3b76fe2c5fac)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          URL=$(az webapp list \
            --resource-group $(rgName) \
            --query "[0].{hostName: defaultHostName}" \
            --output tsv)
          echo $URL
          curl https://$URL
      displayName: 'Get URL & CURL App Service'

- stage: Build
  dependsOn: []
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'npm install, build and test'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop      
